#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../src/gram.h"
#include "../src/parser_state.h"
#include "test_helper.h"

#test parse_scalar_declaration_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test test_scalar_declaration_2
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, LPAREN, strdup("("), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, ADD, strdup("+"), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, RPAREN, strdup(")"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_scalar_declaration_3
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, LPAREN, strdup("("), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, ADD, strdup("+"), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, MULT, strdup("*"), &parser_state);
    Parse(parser, NUMBER, strdup("3"), &parser_state);
    Parse(parser, RPAREN, strdup(")"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_vector_declaration_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, LBRACKET, strdup("["), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("3"), &parser_state);
    Parse(parser, RBRACKET, strdup("]"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_vector_addition_1
    /*struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, LBRACKET, strdup("["), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, RBRACKET, strdup("]"), &parser_state);
    Parse(parser, VECADD, strdup("|+"), &parser_state);
    Parse(parser, LBRACKET, strdup("["), &parser_state);
    Parse(parser, NUMBER, strdup("3"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("4"), &parser_state);
    Parse(parser, RBRACKET, strdup("]"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);*/

#test parse_vector_scalar_multiplication_1
    /*struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, SCMULT, strdup("|*"), &parser_state);
    Parse(parser, LBRACKET, strdup("["), &parser_state);
    Parse(parser, NUMBER, strdup("3"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("4"), &parser_state);
    Parse(parser, RBRACKET, strdup("]"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);*/

#test parse_declaration_sequence_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);
    Parse(parser, IDENTIFIER, strdup("b"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_expression_in_vector_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, LBRACKET, strdup("["), &parser_state);
    Parse(parser, LPAREN, strdup("("), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, ADD, strdup("+"), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, RPAREN, strdup(")"), &parser_state);
    Parse(parser, MULT, strdup("*"), &parser_state);
    Parse(parser, NUMBER, strdup("3"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, NUMBER, strdup("3"), &parser_state);
    Parse(parser, RBRACKET, strdup("]"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);
