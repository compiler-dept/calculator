#include <stdio.h>
#include <stdlib.h>
#include "../src/gram.h"
#include "../src/parser_state.h"
#include "test_helper.h"

#test parse_scalar_declaration_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test test_scalar_declaration_2
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, LPAREN, "(", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, ADD, "+", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, RPAREN, ")", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_scalar_declaration_3
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, LPAREN, "(", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, ADD, "+", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, MULT, "*", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, RPAREN, ")", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_vector_declaration_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, LBRACKET, "[", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, RBRACKET, "]", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_vector_addition_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, LBRACKET, "[", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, RBRACKET, "]", &parser_state);
    Parse(parser, VECADD, "|+", &parser_state);
    Parse(parser, LBRACKET, "[", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "4", &parser_state);
    Parse(parser, RBRACKET, "]", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_vector_scalar_multiplication_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, SCMULT, "|*", &parser_state);
    Parse(parser, LBRACKET, "[", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "4", &parser_state);
    Parse(parser, RBRACKET, "]", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_declaration_sequence_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);
    Parse(parser, IDENTIFIER, "b", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_expression_in_vector_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, LBRACKET, "[", &parser_state);
    Parse(parser, LPAREN, "(", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, ADD, "+", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, RPAREN, ")", &parser_state);
    Parse(parser, MULT, "*", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, COMMA, ",", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, RBRACKET, "]", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

#test parse_atomic_1
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "42", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.primary_expression->atomic->number == 42);
    ck_assert(parser_state.state == OK);
