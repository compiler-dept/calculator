#include <stdio.h>
#include <stdlib.h>
#include "../src/gram.h"
#include "../src/hashmap.h"
#include "../src/ast_eval.h"
#include "../src/parser_state.h"
#include "test_helper.h"


#test evaluate_simple_scalar_declaration
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

    struct hashmap *hashmap = hashmap_alloc(4);
    ev_translation_unit(parser_state.translation_unit, &hashmap);

    double *a = (double*) hashmap_get(hashmap, "a");
    
    ck_assert(*a == 1);

#test evaluate_scalar_declaration
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "3", &parser_state);
    Parse(parser, MULT, "*", &parser_state);
    Parse(parser, LPAREN, "(", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, ADD, "+", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, RPAREN, ")", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

    struct hashmap *hashmap = hashmap_alloc(4);
    ev_translation_unit(parser_state.translation_unit, &hashmap);

    double *a = (double*) hashmap_get(hashmap, "a");
    
    ck_assert(*a == 6);
