#include <stdio.h>
#include <stdlib.h>
#include "../src/gram.h"
#include "../src/parser_state.h"
#include "test_helper.h"
#include "../src/ast.h"
#include "../src/ast_eval.h"

#test test_iterator_postorder
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, ADD, "+", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

    struct ast_iterator *iterator = ast_iterator_init(parser_state.root, 
            POSTORDER);

    struct node* temp;


    int i = 0;
    while ((temp = ast_iterator_next(iterator))){
        i++;
    }
    
    ck_assert(iterator->stack == NULL);
    ck_assert(i == 15);
    free(iterator);

#test test_ast_eval
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, MULT, "*", &parser_state);
    Parse(parser, SUB, "-", &parser_state);
    Parse(parser, LPAREN, "(", &parser_state);
    Parse(parser, NUMBER, "5", &parser_state);
    Parse(parser, SUB, "-", &parser_state);
    Parse(parser, NUMBER, "2", &parser_state);
    Parse(parser, RPAREN, ")", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, IDENTIFIER, "b", &parser_state);
    Parse(parser, EQ, "=", &parser_state);
    Parse(parser, IDENTIFIER, "a", &parser_state);
    Parse(parser, ADD, "+", &parser_state);
    Parse(parser, NUMBER, "1", &parser_state);
    Parse(parser, SEMIC, ";", &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

    struct hashmap *mappings = NULL;
    ast_eval(parser_state.root, &mappings);
    
    for (int i = 0; i<mappings->capacity; i++){
        if (mappings->values[i].key){
            printf("%s: %f\n", mappings->values[i].key, 
                *((double*)mappings->values[i].value));
        }
    }

    double *val = ((double*)hashmap_get(mappings, "a"));
    ck_assert(*val == -6);

    val = ((double*)hashmap_get(mappings, "b"));
    ck_assert(*val == -5);

    hashmap_free(mappings);
