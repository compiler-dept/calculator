#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../src/gram.h"
#include "../src/parser_state.h"
#include "test_helper.h"
#include "../src/ast.h"
#include "../src/ast_eval.h"

#test test_ast_eval
    struct parser_state parser_state;
    void *parser = ParseAlloc(malloc);

    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, MULT, strdup("*"), &parser_state);
    Parse(parser, SUB, strdup("-"), &parser_state);
    Parse(parser, LPAREN, strdup("("), &parser_state);
    Parse(parser, NUMBER, strdup("5"), &parser_state);
    Parse(parser, SUB, strdup("-"), &parser_state);
    Parse(parser, NUMBER, strdup("2"), &parser_state);
    Parse(parser, RPAREN, strdup(")"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, IDENTIFIER, strdup("b"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, ADD, strdup("+"), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, IDENTIFIER, strdup("c"), &parser_state);
    Parse(parser, EQ, strdup("="), &parser_state);
    Parse(parser, LBRACKET, strdup("["), &parser_state);
    Parse(parser, IDENTIFIER, strdup("a"), &parser_state);
    Parse(parser, SUB, strdup("-"), &parser_state);
    Parse(parser, NUMBER, strdup("1"), &parser_state);
    Parse(parser, COMMA, strdup(","), &parser_state);
    Parse(parser, IDENTIFIER, strdup("b"), &parser_state);
    Parse(parser, RBRACKET, strdup("]"), &parser_state);
    Parse(parser, SEMIC, strdup(";"), &parser_state);

    Parse(parser, 0, 0, &parser_state);
    ParseFree(parser, free);

    ck_assert(parser_state.state == OK);

    struct hashmap *mappings = NULL;
    ast_eval(parser_state.root, &mappings);

    struct ast_eval_result *val = ((struct ast_eval_result*)hashmap_get(mappings, "a"));
    ck_assert(val->number == -6);

    val = ((struct ast_eval_result*)hashmap_get(mappings, "b"));
    ck_assert(val->number == -5);

    val = ((struct ast_eval_result*)hashmap_get(mappings, "c"));
    ck_assert(val->vector.compc == 2);
    ck_assert(val->vector.compv[0] == -7);
    ck_assert(val->vector.compv[1] == -5);

    for (int i = 0; i<mappings->capacity; i++){
        if (mappings->values[i].key){
            free(mappings->values[i].value);
        }
    }

    tree_free(&(parser_state.root), payload_free);
    hashmap_free(mappings);
